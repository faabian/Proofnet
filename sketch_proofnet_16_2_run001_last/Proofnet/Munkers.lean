import Mathlib

open Filter Set TopologicalSpace
open scoped Topology
noncomputable section

theorem exercise_13_1 (X : Type*) [TopologicalSpace X] (A : Set X)
  (h1 : ‚àÄ x ‚àà A, ‚àÉ U : Set X, x ‚àà U ‚àß IsOpen U ‚àß U ‚äÜ A) :
  IsOpen A  := by
rw [isOpen_iff_forall_mem_open ]
simpa [subset_def, and_assoc, and_comm, and_left_comm] using h1


theorem exercise_16_4 {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]
  (œÄ‚ÇÅ : X √ó Y ‚Üí X)
  (œÄ‚ÇÇ : X √ó Y ‚Üí Y)
  (h‚ÇÅ : œÄ‚ÇÅ = Prod.fst)
  (h‚ÇÇ : œÄ‚ÇÇ = Prod.snd) :
  IsOpenMap œÄ‚ÇÅ ‚àß IsOpenMap œÄ‚ÇÇ  := by
have hœÄ‚ÇÅ_open : IsOpenMap œÄ‚ÇÅ
¬∑ intro U hU
  rw [h‚ÇÅ]
  have h_basis : ‚àÄ (V : Set Y), IsOpen (U √óÀ¢ V) ‚Üí IsOpen U
  ¬∑ exact ?sorry_0
    tauto
  ¬∑ have h_image : IsOpen (Prod.fst '' U)
    ¬∑ exact ?sorry_1
      exact isOpenMap_fst _ hU
    ¬∑ exact h_image
¬∑ have hœÄ‚ÇÇ_open : IsOpenMap œÄ‚ÇÇ
  ¬∑ intro V hV
    rw [h‚ÇÇ]
    have h_basis : ‚àÄ (U : Set X), IsOpen (U √óÀ¢ V) ‚Üí IsOpen V
    ¬∑ exact ?sorry_2
      tauto
    ¬∑ have h_image : IsOpen (Prod.snd '' V)
      ¬∑ exact ?sorry_3
        exact isOpenMap_snd _ hV
      ¬∑ exact h_image
  ¬∑ exact ‚ü®hœÄ‚ÇÅ_open, hœÄ‚ÇÇ_open‚ü©


theorem exercise_17_4 {X : Type*} [TopologicalSpace X]
  (U A : Set X) (hU : IsOpen U) (hA : IsClosed A) :
  IsOpen (U \ A) ‚àß IsClosed (A \ U)  := by
rw [‚Üê isOpen_compl_iff] at hA
aesop
¬∑ rw [diff_eq_compl_inter ]
  exact IsOpen.inter hA.isOpen_compl hU
¬∑ exact hA.sdiff hU


theorem exercise_18_8a {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]
  [LinearOrder Y] [OrderTopology Y] {f g : X ‚Üí Y}
  (hf : Continuous f) (hg : Continuous g) :
  IsClosed {x | f x ‚â§ g x}  := by
apply isClosed_le hf hg


theorem exercise_18_8b {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]
  [LinearOrder Y] [OrderTopology Y] {f g : X ‚Üí Y}
  (hf : Continuous f) (hg : Continuous g) :
  Continuous (Œª x => min (f x) (g x))  := by
apply Continuous.min
¬∑ ¬∑ exact hf
¬∑ ¬∑ exact hg


theorem exercise_19_6a
  {n : ‚Ñï}
  {f : Fin n ‚Üí Type*} {x : ‚Ñï ‚Üí Œ†a, f a}
  (y : Œ†i, f i)
  [Œ†a, TopologicalSpace (f a)] :
  Tendsto x atTop (ùìù y) ‚Üî ‚àÄ i, Tendsto (Œª j => (x j) i) atTop (ùìù (y i))  := by
rw [tendsto_pi_nhds ]


theorem exercise_22_2b {X : Type*} [TopologicalSpace X]
  {A : Set X} (r : X ‚Üí A) (hr : Continuous r) (h : ‚àÄ x : A, r x = x) :
  QuotientMap r  := by
trivial
¬∑ exact fun a => ‚ü®_, h a‚ü©
¬∑ ext
  rw [isOpen_induced_iff ]
  aesop
  ¬∑ exact (continuous_subtype_val.comp hr).isOpen_preimage w left
  ¬∑ exact ‚ü®_, a, Set.ext fun x => by simp [Subtype.ext_iff, h x x.2]‚ü©


theorem exercise_22_5 {X Y : Type*} [TopologicalSpace X]
  [TopologicalSpace Y] (p : X ‚Üí Y) (hp : IsOpenMap p)
  (A : Set X) (hA : IsOpen A) : IsOpenMap (p ‚àò Subtype.val : A ‚Üí Y)  := by
simpa only [Set.restrict_eq, Subtype.range_coe_subtype] using hp.restrict hA


theorem exercise_23_2 {X : Type*}
  [TopologicalSpace X] {A : ‚Ñï ‚Üí Set X} (hA : ‚àÄ n, IsConnected (A n))
  (hAn : ‚àÄ n, A n ‚à© A (n + 1) ‚â† ‚àÖ) :
  IsConnected (‚ãÉ n, A n)  := by
apply IsConnected.iUnion_of_chain
¬∑ assumption
¬∑ simpa [‚Üê Set.nonempty_iff_ne_empty] using hAn


theorem exercise_25_4 {X : Type*} [TopologicalSpace X]
  [LocPathConnectedSpace X] (U : Set X) (hU : IsOpen U)
  (hcU : IsConnected U) : IsPathConnected U  := by
rw [isPathConnected_iff_pathConnectedSpace ]
haveI := locPathConnected_of_isOpen hU hcU
haveI := locPathConnected_of_isOpen hU hcU
haveI := locPathConnected_of_isOpen hU hcU
haveI := locPathConnected_of_isOpen hU hcU
haveI := locPathConnected_of_isOpen hU
rw [pathConnectedSpace_iff_connectedSpace ]
rw [isConnected_iff_connectedSpace] at hcU
exact hcU


theorem exercise_32_3 {X : Type*} [TopologicalSpace X]
  (hX : LocallyCompactSpace X) (hX' : T2Space X) :
  RegularSpace X  := by
infer_instance

