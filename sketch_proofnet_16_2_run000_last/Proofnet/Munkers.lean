import Mathlib

open Filter Set TopologicalSpace
open scoped Topology
noncomputable section

theorem exercise_13_1 (X : Type*) [TopologicalSpace X] (A : Set X)
  (h1 : ‚àÄ x ‚àà A, ‚àÉ U : Set X, x ‚àà U ‚àß IsOpen U ‚àß U ‚äÜ A) :
  IsOpen A  := by
rw [isOpen_iff_mem_nhds ]
intro x hx
rcases h1 x hx with ‚ü®U, ‚ü®hx, hUo, hU‚ü©‚ü©
exact mem_of_superset (hUo.mem_nhds hx) hU


theorem exercise_16_4 {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]
  (œÄ‚ÇÅ : X √ó Y ‚Üí X)
  (œÄ‚ÇÇ : X √ó Y ‚Üí Y)
  (h‚ÇÅ : œÄ‚ÇÅ = Prod.fst)
  (h‚ÇÇ : œÄ‚ÇÇ = Prod.snd) :
  IsOpenMap œÄ‚ÇÅ ‚àß IsOpenMap œÄ‚ÇÇ  := by
subst h‚ÇÅ
rw [h‚ÇÇ ]
exact ‚ü®isOpenMap_fst, isOpenMap_snd‚ü©


theorem exercise_17_4 {X : Type*} [TopologicalSpace X]
  (U A : Set X) (hU : IsOpen U) (hA : IsClosed A) :
  IsOpen (U \ A) ‚àß IsClosed (A \ U)  := by
have h1 : U \ A = U ‚à© A·∂ú
¬∑ exact ?sorry_0
  rfl
¬∑ have h2 : IsOpen (U ‚à© A·∂ú)
  ¬∑ exact ?sorry_1
    exact hU.inter hA.isOpen_compl
  ¬∑ have h3 : A \ U = A ‚à© U·∂ú
    ¬∑ exact ?sorry_2
      rw [diff_eq, inter_comm ]
    ¬∑ have h4 : IsClosed (A ‚à© U·∂ú)
      ¬∑ exact ?sorry_3
        apply hA.inter
        exact isClosed_compl_iff.mpr hU
      ¬∑ exact ‚ü®h2, h4‚ü©


theorem exercise_18_8a {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]
  [LinearOrder Y] [OrderTopology Y] {f g : X ‚Üí Y}
  (hf : Continuous f) (hg : Continuous g) :
  IsClosed {x | f x ‚â§ g x}  := by
simpa only [Set.setOf_and, Set.setOf_forall, ‚Üê forall_and] using
  isClosed_le hf hg


theorem exercise_18_8b {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]
  [LinearOrder Y] [OrderTopology Y] {f g : X ‚Üí Y}
  (hf : Continuous f) (hg : Continuous g) :
  Continuous (Œª x => min (f x) (g x))  := by
apply Continuous.min hf hg <;> apply continuous_const


theorem exercise_19_6a
  {n : ‚Ñï}
  {f : Fin n ‚Üí Type*} {x : ‚Ñï ‚Üí Œ†a, f a}
  (y : Œ†i, f i)
  [Œ†a, TopologicalSpace (f a)] :
  Tendsto x atTop (ùìù y) ‚Üî ‚àÄ i, Tendsto (Œª j => (x j) i) atTop (ùìù (y i))  := by
rw [tendsto_pi_nhds ]


theorem exercise_22_2b {X : Type*} [TopologicalSpace X]
  {A : Set X} (r : X ‚Üí A) (hr : Continuous r) (h : ‚àÄ x : A, r x = x) :
  QuotientMap r  := by
let i : A ‚Üí X := fun a => a
have hi : Continuous i
¬∑ exact ?sorry_0
  exact continuous_subtype_val
¬∑ have hri : ‚àÄ a : A, (r ‚àò i) a = a
  ¬∑ intro a
    simp [Function.comp, h]
  ¬∑ have hQuotient : QuotientMap r
    ¬∑ exact ?sorry_1
      simp [Function.comp, hri] at h
      unfold QuotientMap
      refine ‚ü®fun _ => ‚ü®_, h _‚ü©, ?_‚ü©
      exact ‚ü®fun a => ‚ü®_, h a.prop‚ü©, rfl‚ü©
      exact ‚ü®fun x => ‚ü®_, ‚ü®x, rfl‚ü©, h _ _‚ü©, congr_arg _ hi‚ü©
      exact ‚ü®fun a => ‚ü®_, (h _ _).symm‚ü©, rfl‚ü©
      exact ‚ü®fun a => ‚ü®_, h a‚ü©, (TopCat.homeoOfIso (subHomeomorphEquivSubtypeProdEq _ _ h)).symm.continuous‚ü©
      refine ‚ü®fun x => ‚ü®x, h _ x.2‚ü©, ?_‚ü©
      ext U
      letI := Subtype.instTopologicalSpace A
      rw [isOpen_induced_iff ]
      exact ‚ü®fun ‚ü®V, hV, f‚ü© ‚Ü¶ congr_arg ((‚Üë) : A ‚Üí Set X) hV ‚ñ∏ hV.2.preimage hi,
  fun hV ‚Ü¶ ‚ü®_, hV.2.preimage hi, Subtype.coe_injective.preimage_image‚ü©‚ü©
      exact ‚ü®fun ‚ü®V, hV, hVU‚ü© ‚Ü¶ hVU ‚ñ∏ isOpen_induced hr (V.preimage i), fun hV ‚Ü¶
  ‚ü®_, hi.isOpen_preimage hV, Set.Subtype.preimage_coe_eq_preimage_coe hV‚ü©‚ü©
      exact ‚ü®fun ‚ü®a, _, rfl‚ü© ‚Ü¶ hi.isOpenMap _ a.2, fun h ‚Ü¶ ‚ü®_, hi.isOpenMap _ a.2, h‚ü©‚ü©
      aesop
      ¬∑ apply Continuous.isOpen_preimage hr
        exact hi.isOpen_preimage _ left
      ¬∑ exact ‚ü®_, a.1.preimage hi, preimage_compl hi.ne_univ‚ü©
        exact ‚ü®_, hi a, preimage_subtype_coe_eq_compl Subset.rfl‚ü©
        exact ‚ü®_, hr.isOpen_preimage a, preimage_subtype_coe_eq_compl hi‚ü©
        exact ‚ü®_, hr.isOpen_preimage hr, rfl‚ü©
        exact ‚ü®Set.iUnion fun a : A => Set.iUnion fun b => Set.iUnion fun _ => U, a, le_antisymm hi a‚ü©
        exact ‚ü®_, a.1.preimage hi, preimage_preimage‚ü©
        exact ‚ü®_, a.1.preimage hi, preimage_subtype_coe_eq_compl U‚ü©
        exact ‚ü®Set.iUnion fun a : A => (a : Set X) ‚Ä¢ ((‚Üë) : A ‚Üí X) ‚Åª¬π' U,
  isOpen_iUnion fun a => (a : Set X).2.2.preimage hi, preimage_iUnion‚ÇÇ _ _ _‚ü©
        exact ‚ü®_, a.2.preimage hi, preimage_id U‚ü©
        aesop
    ¬∑ exact hQuotient


theorem exercise_22_5 {X Y : Type*} [TopologicalSpace X]
  [TopologicalSpace Y] (p : X ‚Üí Y) (hp : IsOpenMap p)
  (A : Set X) (hA : IsOpen A) : IsOpenMap (p ‚àò Subtype.val : A ‚Üí Y)  := by
simpa using hp.restrict hA


theorem exercise_23_2 {X : Type*}
  [TopologicalSpace X] {A : ‚Ñï ‚Üí Set X} (hA : ‚àÄ n, IsConnected (A n))
  (hAn : ‚àÄ n, A n ‚à© A (n + 1) ‚â† ‚àÖ) :
  IsConnected (‚ãÉ n, A n)  := by
apply IsConnected.iUnion_of_chain
¬∑ exact hA
¬∑ intro n
  rw [inter_comm ]
  rw [inter_comm ]
  exact (Set.nonempty_iff_ne_empty.mpr (hAn n)).imp fun x hx => ‚ü®hx.1, hx.2‚ü©


theorem exercise_32_3 {X : Type*} [TopologicalSpace X]
  (hX : LocallyCompactSpace X) (hX' : T2Space X) :
  RegularSpace X  := by
infer_instance

