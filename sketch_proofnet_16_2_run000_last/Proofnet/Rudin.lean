import Mathlib

open Topology Filter Real Complex TopologicalSpace Finset
open scoped BigOperators
noncomputable section

theorem exercise_1_1a
  (x : ‚Ñù) (y : ‚Ñö) :
  ( Irrational x ) -> Irrational ( x + y )  := by
simpa using exercise_1_9x


theorem exercise_1_1b
(x : ‚Ñù)
(y : ‚Ñö)
(h : y ‚â† 0)
: ( Irrational x ) -> Irrational ( x * y )  := by
contrapose
norm_cast
delta Irrational
simp_all
rintro a ha
exact ‚ü®a * y‚Åª¬π, by simp_all [mul_assoc]‚ü©


theorem exercise_1_4
(Œ± : Type*) [PartialOrder Œ±]
(s : Set Œ±)
(x y : Œ±)
(h‚ÇÄ : Set.Nonempty s)
(h‚ÇÅ : x ‚àà lowerBounds s)
(h‚ÇÇ : y ‚àà upperBounds s)
: x ‚â§ y  := by
obtain ‚ü®z, hz‚ü© := h‚ÇÄ
have hxz : x ‚â§ z
¬∑ exact ?sorry_0
  exact h‚ÇÅ hz
¬∑ have hzy : z ‚â§ y
  ¬∑ exact ?sorry_1
    exact h‚ÇÇ hz
  ¬∑ exact le_trans hxz hzy


theorem exercise_1_14
  (z : ‚ÑÇ) (h : abs z = 1)
  : (abs (1 + z)) ^ 2 + (abs (1 - z)) ^ 2 = 4  := by
rw [‚Üê abs_sq] <;> positivity
rw [‚Üê Complex.ofReal_inj] <;> norm_num
norm_cast
rw [‚Üê Complex.norm_eq_abs, ‚Üê Complex.norm_eq_abs, norm_add_sq_real, norm_sub_sq_real,
  ‚Üê Complex.ofReal_inj ]
simp
rw [h ]
ring
norm_num


theorem exercise_1_18b
  : ¬¨ ‚àÄ (x : ‚Ñù), ‚àÉ (y : ‚Ñù), y ‚â† 0 ‚àß x * y = 0  := by
simp
by_contra! h
exact one_ne_zero <| h 1
simpa using h 1


theorem exercise_2_25 {K : Type*} [MetricSpace K] [CompactSpace K] :
  ‚àÉ (B : Set (Set K)), Set.Countable B ‚àß IsTopologicalBasis B  := by
letI := upgradePolishSpace K
simp only [upgradePolishSpace, displayText_eq_coe] at this
obtain ‚ü®B, hBc, hB‚ü© := exists_countable_basis K
exact ‚ü®B, hBc, hB.2‚ü©


theorem exercise_3_1a
  (f : ‚Ñï ‚Üí ‚Ñù)
  (h : ‚àÉ (a : ‚Ñù), Tendsto (Œª (n : ‚Ñï) => f n) atTop (ùìù a))
  : ‚àÉ (a : ‚Ñù), Tendsto (Œª (n : ‚Ñï) => |f n|) atTop (ùìù a)  := by
rcases h with ‚ü®a, ha‚ü©
exact ‚ü®|a|, ha.abs‚ü©


theorem exercise_4_2a
  {Œ± : Type} [MetricSpace Œ±]
  {Œ≤ : Type} [MetricSpace Œ≤]
  (f : Œ± ‚Üí Œ≤)
  (h‚ÇÅ : Continuous f)
  : ‚àÄ (x : Set Œ±), f '' (closure x) ‚äÜ closure (f '' x)  := by
simpa only [image_eq_range] using fun x => image_closure_subset_closure_image h‚ÇÅ


theorem exercise_4_3
  {Œ± : Type} [MetricSpace Œ±]
  (f : Œ± ‚Üí ‚Ñù) (h : Continuous f) (z : Set Œ±) (g : z = f‚Åª¬π' {0})
  : IsClosed z  := by
simpa only [g] using isClosed_singleton.preimage h


theorem exercise_4_4a
  {Œ± : Type} [MetricSpace Œ±]
  {Œ≤ : Type} [MetricSpace Œ≤]
  (f : Œ± ‚Üí Œ≤)
  (s : Set Œ±)
  (h‚ÇÅ : Continuous f)
  (h‚ÇÇ : Dense s)
  : f '' Set.univ ‚äÜ closure (f '' s)  := by
have h_closure : closure s = Set.univ
¬∑ exact ?sorry_0
  rw [dense_iff_closure_eq] at h‚ÇÇ
  exact h‚ÇÇ
¬∑ have h_continuity : f '' closure s ‚äÜ closure (f '' s)
  ¬∑ exact ?sorry_1
    apply image_closure_subset_closure_image h‚ÇÅ
  ¬∑ have h_image_univ : f '' Set.univ = f '' closure s
    ¬∑ exact ?sorry_2
      rw [h_closure ]
    ¬∑ have h_final : f '' Set.univ ‚äÜ closure (f '' s)
      ¬∑ rw [h_image_univ]
        exact h_continuity
      ¬∑ exact h_final


theorem exercise_4_4b
  {Œ± : Type} [MetricSpace Œ±]
  {Œ≤ : Type} [MetricSpace Œ≤]
  (f g : Œ± ‚Üí Œ≤)
  (s : Set Œ±)
  (h‚ÇÅ : Continuous f)
  (h‚ÇÇ : Continuous g)
  (h‚ÇÉ : Dense s)
  (h‚ÇÑ : ‚àÄ x ‚àà s, f x = g x)
  : f = g  := by
haveI := h‚ÇÉ.false
rw [Continuous.ext_on h‚ÇÉ h‚ÇÅ h‚ÇÇ ]
exact fun x hx => h‚ÇÑ x hx


theorem exercise_4_11a
  {X : Type*} [MetricSpace X]
  {Y : Type*} [MetricSpace Y]
  (f : X ‚Üí Y) (hf : UniformContinuous f)
  (x : ‚Ñï ‚Üí X) (hx : CauchySeq x) :
  CauchySeq (Œª n => f (x n))  := by
simpa only [CauchySeq, Metric.cauchy_iff] using hx.map hf


theorem exercise_4_12
  {Œ± Œ≤ Œ≥ : Type*} [UniformSpace Œ±] [UniformSpace Œ≤] [UniformSpace Œ≥]
  {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ≥}
  (hf : UniformContinuous f) (hg : UniformContinuous g) :
  UniformContinuous (g ‚àò f)  := by
apply Tendsto.comp hg hf

