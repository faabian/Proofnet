import Mathlib

open Filter Real Function
open scoped Topology
noncomputable section

theorem exercise_2_26 {M : Type*} [TopologicalSpace M]
  (U : Set M) : IsOpen U ‚Üî ‚àÄ x ‚àà U, ¬¨ ClusterPt x (ùìü U·∂ú)  := by
simp [isOpen_iff_mem_nhds, clusterPt_principal_iff, not_forall, exists_prop, U] <;>
  exact fun x => id
aesop
¬∑ exact ‚ü®U, a x a_1, by simp‚ü©
¬∑ rcases a x a_1 with ‚ü®s, hs, h‚ü©
  exact mem_of_superset hs fun y hy => Classical.not_not.1 fun hY => h ‚ü®y, hy, hY‚ü©


theorem exercise_2_32a (A : Set ‚Ñï) : IsClopen A  := by
rw [‚Üê Set.inter_union_compl A ]
apply IsClopen.union <;> apply IsClosed.isClopen <;> simp
exact disjointed A


theorem exercise_2_41 (m : ‚Ñï) {X : Type*} [NormedSpace ‚Ñù ((Fin m) ‚Üí ‚Ñù)] :
  IsCompact (Metric.closedBall 0 1)  := by
apply isCompact_closedBall _

