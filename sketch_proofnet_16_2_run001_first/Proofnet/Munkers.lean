import Mathlib

open Filter Set TopologicalSpace
open scoped Topology
noncomputable section

theorem exercise_13_1 (X : Type*) [TopologicalSpace X] (A : Set X)
  (h1 : ‚àÄ x ‚àà A, ‚àÉ U : Set X, x ‚àà U ‚àß IsOpen U ‚àß U ‚äÜ A) :
  IsOpen A  := by
let U := ‚ãÉ x ‚àà A, Classical.choose (h1 x ‚Äπx ‚àà A‚Ä∫)
have hA_eq_union : A = U
¬∑ have hA_subset_U : A ‚äÜ U
  ¬∑ exact ?sorry_0
    intro x hx
    exact mem_iUnion‚ÇÇ.2 ‚ü®x, hx, (h1 x hx).choose_spec.1‚ü©
  ¬∑ have hU_subset_A : U ‚äÜ A
    ¬∑ exact ?sorry_1
      exact iUnion‚ÇÇ_subset fun x hx => (Classical.choose_spec <| h1 x hx).2.2
    ¬∑ exact ?sorry_2
      exact hA_subset_U.antisymm hU_subset_A
¬∑ have hU_open : IsOpen U
  ¬∑ exact ?sorry_3
    exact isOpen_iUnion fun x => isOpen_iUnion fun _ => (Classical.choose_spec <| h1 x _).2.1
    exact isOpen_iUnion fun x => isOpen_iUnion fun _ => (Classical.choose_spec <| h1 x ‚Äπ_‚Ä∫).2.1
  ¬∑ rw [hA_eq_union]
    exact hU_open


theorem exercise_16_4 {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]
  (œÄ‚ÇÅ : X √ó Y ‚Üí X)
  (œÄ‚ÇÇ : X √ó Y ‚Üí Y)
  (h‚ÇÅ : œÄ‚ÇÅ = Prod.fst)
  (h‚ÇÇ : œÄ‚ÇÇ = Prod.snd) :
  IsOpenMap œÄ‚ÇÅ ‚àß IsOpenMap œÄ‚ÇÇ  := by
subst h‚ÇÅ
refine ‚ü®isOpenMap_fst, ?_‚ü©
rw [h‚ÇÇ ]
exact isOpenMap_snd


theorem exercise_17_4 {X : Type*} [TopologicalSpace X]
  (U A : Set X) (hU : IsOpen U) (hA : IsClosed A) :
  IsOpen (U \ A) ‚àß IsClosed (A \ U)  := by
rw [and_comm ]
exact ‚ü®hA.sdiff hU, hU.sdiff hA‚ü©


theorem exercise_18_8a {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]
  [LinearOrder Y] [OrderTopology Y] {f g : X ‚Üí Y}
  (hf : Continuous f) (hg : Continuous g) :
  IsClosed {x | f x ‚â§ g x}  := by
simpa only [Set.setOf_and, Set.setOf_forall, ‚Üê forall_and] using
  isClosed_le hf hg


theorem exercise_18_8b {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]
  [LinearOrder Y] [OrderTopology Y] {f g : X ‚Üí Y}
  (hf : Continuous f) (hg : Continuous g) :
  Continuous (Œª x => min (f x) (g x))  := by
have h_continuous_min : Continuous (fun p : Y √ó Y => min p.1 p.2)
¬∑ exact continuous_min
¬∑ have h_prod_continuous : Continuous (fun x => (f x, g x))
  ¬∑ exact Continuous.prod_mk hf hg
  ¬∑ exact h_continuous_min.comp h_prod_continuous


theorem exercise_19_6a
  {n : ‚Ñï}
  {f : Fin n ‚Üí Type*} {x : ‚Ñï ‚Üí Œ†a, f a}
  (y : Œ†i, f i)
  [Œ†a, TopologicalSpace (f a)] :
  Tendsto x atTop (ùìù y) ‚Üî ‚àÄ i, Tendsto (Œª j => (x j) i) atTop (ùìù (y i))  := by
rw [tendsto_pi_nhds ]


theorem exercise_22_2b {X : Type*} [TopologicalSpace X]
  {A : Set X} (r : X ‚Üí A) (hr : Continuous r) (h : ‚àÄ x : A, r x = x) :
  QuotientMap r  := by
rw [quotientMap_iff_closed ]
exact ‚ü®fun x => ‚ü®x, fun _ => rfl‚ü©, fun s => ‚ü®fun hs => ‚ü®_, hs.preimage hr‚ü©, fun hs => ‚ü®_, hs.image hr‚ü©‚ü©‚ü©
exact ‚ü®fun a => ‚ü®_, (h a).symm‚ü©, fun s => ‚ü®_, hr.isClosed_preimage‚ü©‚ü©
exact ‚ü®Function.Surjective.of_comp fun x => (h x).symm, fun s => hr.isClosed_preimage‚ü©
exact ‚ü®fun a => ‚ü®_, h a‚ü©, fun s => ‚ü®_, @isClosed_quotientMap_iff _ _ (QuotientMap.mk r) s‚ü©‚ü©
exact ‚ü®fun x => ‚ü®r x, fun _ => x.property, fun _ => rfl‚ü©, fun s => ‚ü®fun h1 => ?_,
  fun h2 => (isClosed_subtype_iff h2).mpr h1‚ü©‚ü©
refine ‚ü®fun x => ‚ü®r x, ?_‚ü©, fun s => ‚ü®fun hs => ?_, fun hs => ?_‚ü©‚ü©
¬∑ rw [h ]
  exact h x
¬∑ exact hs.preimage hr
¬∑ convert show IsClosed ((‚Üë) ‚Åª¬π' s) from hs
  rw [isClosed_induced_iff ]
  exact ‚ü®fun ‚ü®t, ht, hs‚ü© => hs, fun hs => ‚ü®_, ht.preimage (continuous_subtype_val.comp hr), hs‚ü©‚ü©
  exact ‚ü®fun ‚ü®t, ht, h‚ü© => h ‚ñ∏ ht, fun hs => ‚ü®range (clusion hs), hs, rfl‚ü©‚ü©
  aesop


theorem exercise_22_5 {X Y : Type*} [TopologicalSpace X]
  [TopologicalSpace Y] (p : X ‚Üí Y) (hp : IsOpenMap p)
  (A : Set X) (hA : IsOpen A) : IsOpenMap (p ‚àò Subtype.val : A ‚Üí Y)  := by
simpa only [Set.restrict_eq, Subtype.range_coe_subtype] using hp.restrict hA


theorem exercise_23_2 {X : Type*}
  [TopologicalSpace X] {A : ‚Ñï ‚Üí Set X} (hA : ‚àÄ n, IsConnected (A n))
  (hAn : ‚àÄ n, A n ‚à© A (n + 1) ‚â† ‚àÖ) :
  IsConnected (‚ãÉ n, A n)  := by
apply IsConnected.iUnion_of_chain hA
simpa [‚Üê Set.nonempty_iff_ne_empty] using hAn


theorem exercise_25_4 {X : Type*} [TopologicalSpace X]
  [LocPathConnectedSpace X] (U : Set X) (hU : IsOpen U)
  (hcU : IsConnected U) : IsPathConnected U  := by
rw [isPathConnected_iff_pathConnectedSpace ]
rw [pathConnectedSpace_iff_connectedSpace ]
¬∑ rw [isConnected_iff_connectedSpace] at hcU
  exact hcU
¬∑ exact locPathConnected_of_isOpen hU


theorem exercise_32_3 {X : Type*} [TopologicalSpace X]
  (hX : LocallyCompactSpace X) (hX' : T2Space X) :
  RegularSpace X  := by
infer_instance

