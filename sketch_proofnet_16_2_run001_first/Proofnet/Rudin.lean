import Mathlib

open Topology Filter Real Complex TopologicalSpace Finset
open scoped BigOperators
noncomputable section

theorem exercise_1_1a
  (x : ‚Ñù) (y : ‚Ñö) :
  ( Irrational x ) -> Irrational ( x + y )  := by
simpa using exercise_1_add x y


theorem exercise_1_1b
(x : ‚Ñù)
(y : ‚Ñö)
(h : y ‚â† 0)
: ( Irrational x ) -> Irrational ( x * y )  := by
intro exercise_1
exact exercise_1.mul_rat h


theorem exercise_1_4
(Œ± : Type*) [PartialOrder Œ±]
(s : Set Œ±)
(x y : Œ±)
(h‚ÇÄ : Set.Nonempty s)
(h‚ÇÅ : x ‚àà lowerBounds s)
(h‚ÇÇ : y ‚àà upperBounds s)
: x ‚â§ y  := by
obtain ‚ü®z, hz‚ü© := h‚ÇÄ
have hxz : x ‚â§ z
¬∑ exact h‚ÇÅ hz
¬∑ have hzy : z ‚â§ y
  ¬∑ exact h‚ÇÇ hz
  ¬∑ calc
  x ‚â§ z := hxz
  _ ‚â§ y := hzy


theorem exercise_1_12 (n : ‚Ñï) (f : ‚Ñï ‚Üí ‚ÑÇ) :
  abs (‚àë i in range n, f i) ‚â§ ‚àë i in range n, abs (f i)  := by
induction' n with n ih
¬∑ simp
¬∑ rw [sum_range_succ, sum_range_succ ]
  trans
  apply Complex.abs.add_le
  exact add_le_add ih le_rfl


theorem exercise_1_17
  (n : ‚Ñï)
  (x y : EuclideanSpace ‚Ñù (Fin n)) -- R^n
  : ‚Äñx + y‚Äñ^2 + ‚Äñx - y‚Äñ^2 = 2*‚Äñx‚Äñ^2 + 2*‚Äñy‚Äñ^2  := by
rw [norm_add_sq_real, norm_sub_sq_real ]
ring


theorem exercise_1_18b
  : ¬¨ ‚àÄ (x : ‚Ñù), ‚àÉ (y : ‚Ñù), y ‚â† 0 ‚àß x * y = 0  := by
intro h
exact one_ne_zero <| h 1
simp only [mul_eq_zero, Ne, not_exists, not_and] at h
simpa [not_or, sub_self, sub_eq_zero] using h 1


theorem exercise_2_25 {K : Type*} [MetricSpace K] [CompactSpace K] :
  ‚àÉ (B : Set (Set K)), Set.Countable B ‚àß IsTopologicalBasis B  := by
rcases exists_countable_basis K with ‚ü®s, hsc, hsU‚ü©
exact ‚ü®s, hsc, hsU.2‚ü©


theorem exercise_3_1a
  (f : ‚Ñï ‚Üí ‚Ñù)
  (h : ‚àÉ (a : ‚Ñù), Tendsto (Œª (n : ‚Ñï) => f n) atTop (ùìù a))
  : ‚àÉ (a : ‚Ñù), Tendsto (Œª (n : ‚Ñï) => |f n|) atTop (ùìù a)  := by
rcases h with ‚ü®a, ha‚ü©
exact ‚ü®|a|, ha.abs‚ü©


theorem exercise_4_2a
  {Œ± : Type} [MetricSpace Œ±]
  {Œ≤ : Type} [MetricSpace Œ≤]
  (f : Œ± ‚Üí Œ≤)
  (h‚ÇÅ : Continuous f)
  : ‚àÄ (x : Set Œ±), f '' (closure x) ‚äÜ closure (f '' x)  := by
intro x
rw [‚Üê closure_image_closure ]
¬∑ exact subset_closure
¬∑ fun_prop


theorem exercise_4_3
  {Œ± : Type} [MetricSpace Œ±]
  (f : Œ± ‚Üí ‚Ñù) (h : Continuous f) (z : Set Œ±) (g : z = f‚Åª¬π' {0})
  : IsClosed z  := by
rw [g]
have h_closed_set : IsClosed ({0} : Set ‚Ñù)
¬∑ exact ?sorry_0
  exact isClosed_singleton
¬∑ have h_preimage_closed : IsClosed (f‚Åª¬π' {0})
  ¬∑ exact ?sorry_1
    exact h_closed_set.preimage h
  ¬∑ exact h_preimage_closed


theorem exercise_4_4a
  {Œ± : Type} [MetricSpace Œ±]
  {Œ≤ : Type} [MetricSpace Œ≤]
  (f : Œ± ‚Üí Œ≤)
  (s : Set Œ±)
  (h‚ÇÅ : Continuous f)
  (h‚ÇÇ : Dense s)
  : f '' Set.univ ‚äÜ closure (f '' s)  := by
have h‚ÇÉ : f '' closure s ‚äÜ closure (f '' s)
¬∑ exact ?sorry_0
  exact image_closure_subset_closure_image h‚ÇÅ
¬∑ have h‚ÇÑ : closure s = Set.univ
  ¬∑ exact ?sorry_1
    exact h‚ÇÇ.closure_eq
  ¬∑ have h‚ÇÖ : f '' Set.univ = f '' closure s
    ¬∑ exact ?sorry_2
      rw [h‚ÇÑ ]
    ¬∑ calc
  f '' Set.univ = f '' closure s := h‚ÇÖ
  _ ‚äÜ closure (f '' s) := h‚ÇÉ


theorem exercise_4_4b
  {Œ± : Type} [MetricSpace Œ±]
  {Œ≤ : Type} [MetricSpace Œ≤]
  (f g : Œ± ‚Üí Œ≤)
  (s : Set Œ±)
  (h‚ÇÅ : Continuous f)
  (h‚ÇÇ : Continuous g)
  (h‚ÇÉ : Dense s)
  (h‚ÇÑ : ‚àÄ x ‚àà s, f x = g x)
  : f = g  := by
rw [Continuous.ext_on h‚ÇÉ h‚ÇÅ h‚ÇÇ ]
exact fun x hx => h‚ÇÑ x hx


theorem exercise_4_11a
  {X : Type*} [MetricSpace X]
  {Y : Type*} [MetricSpace Y]
  (f : X ‚Üí Y) (hf : UniformContinuous f)
  (x : ‚Ñï ‚Üí X) (hx : CauchySeq x) :
  CauchySeq (Œª n => f (x n))  := by
rw [cauchySeq_iff] at hx ‚ä¢
intro U hU
obtain ‚ü®V, hV, hVsymm, hVU‚ü© := comp_symm_mem_uniformity_sets hU
rw [uniformity_eq_symm] at hV
rcases hx _ (mem_map.1 <| hf hU) with ‚ü®N, hN‚ü©
exact ‚ü®N, fun k hk l hl => hN k hk l hl‚ü©


theorem exercise_4_12
  {Œ± Œ≤ Œ≥ : Type*} [UniformSpace Œ±] [UniformSpace Œ≤] [UniformSpace Œ≥]
  {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ≥}
  (hf : UniformContinuous f) (hg : UniformContinuous g) :
  UniformContinuous (g ‚àò f)  := by
have := hg.comp hf
exact this

